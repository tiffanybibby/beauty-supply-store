{"ast":null,"code":"export {};","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { withClientState } from 'apollo-link-state'\nimport { ApolloLink, Observable, Operation } from 'apollo-link'\n\nimport { ApolloProvider } from 'react-apollo'\n\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks'\n\nimport Layout from './components/layout/Layout'\n\n\n\n// import { useState } from 'react';\n// import { useQuery } from 'react-query';\n// // Components\n// import Footer from './Footer'\n// import Item from './Item/Item';\n// import Cart from './Cart/Cart';\n// import Drawer from '@material-ui/core/Drawer';\n// import LinearProgress from '@material-ui/core/LinearProgress';\n// import Grid from '@material-ui/core/Grid';\n// import AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\n// import Badge from '@material-ui/core/Badge';\n// // Styles\n// import { Wrapper, StyledButton } from './App.styles';\n// // Types\n// export type CartItemType = {\n//   id: number;\n//   name: string;\n//   description: string;\n//   category: string;\n//   img: string;\n//   price: number;\n//   amount: number;\n//   countInStock: number;\n//   rating: number;\n// };\n\n\n// const getProducts = async () => {\n//   try {\n//     const response = await fetch(\"http://localhost:5000/products\");\n//     const jsonData = await response.json();\n\n//     // setTodos(jsonData);\n//   } catch (err) {\n//     console.error(err);\n//   }\n// };\n\n\n\n\n// // const getProducts = async (): Promise<CartItemType[]> =>\n// //   await (await fetch('http://localhost:5000/products')).json();\n\n// const App = () => {\n//   const [cartOpen, setCartOpen] = useState(false);\n//   const [cartItems, setCartItems] = useState([] as CartItemType[]);\n//   const { data, isLoading, error } = useQuery<CartItemType[]>(\n//     'products',\n//     getProducts\n//   );\n//   console.log(data);\n\n//   const getTotalItems = (items: CartItemType[]) =>\n//     items.reduce((ack: number, item) => ack + item.amount, 0);\n\n//   const handleAddToCart = (clickedItem: CartItemType) => {\n//     setCartItems(prev => {\n//       // 1. Is the item already added in the cart?\n//       const isItemInCart = prev.find(item => item.id === clickedItem.id);\n\n//       if (isItemInCart) {\n//         return prev.map(item =>\n//           item.id === clickedItem.id\n//             ? { ...item, amount: item.amount + 1 }\n//             : item\n//         );\n//       }\n//       // First time the item is added\n//       return [...prev, { ...clickedItem, amount: 1 }];\n//     });\n//   };\n\n//   const handleRemoveFromCart = (id: number) => {\n//     setCartItems(prev =>\n//       prev.reduce((ack, item) => {\n//         if (item.id === id) {\n//           if (item.amount === 1) return ack;\n//           return [...ack, { ...item, amount: item.amount - 1 }];\n//         } else {\n//           return [...ack, item];\n//         }\n//       }, [] as CartItemType[])\n//     );\n//   };\n\n//   if (isLoading) return <LinearProgress />;\n//   if (error) return <div>Something went wrong ...</div>;\n\n//   return (\n//     <Wrapper>\n//       <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n//         <Cart\n//           cartItems={cartItems}\n//           addToCart={handleAddToCart}\n//           removeFromCart={handleRemoveFromCart}\n//         />\n//       </Drawer>\n//       <StyledButton onClick={() => setCartOpen(true)}>\n//         <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n//           <AddShoppingCartIcon />\n//         </Badge>\n//       </StyledButton>\n//       <Grid container spacing={3}>\n//         {data?.map(item => (\n//           <Grid item key={item.id} xs={12} sm={4}>\n//             <Item item={item} handleAddToCart={handleAddToCart} />\n//           </Grid>\n//         ))}\n//       </Grid>\n//       <Footer/>\n//     </Wrapper>\n//   );\n// };\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}